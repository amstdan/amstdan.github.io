(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{174:function(a,t,r){"use strict";r.r(t);var e=r(0),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("div",{staticClass:"content"},[r("h2",{attrs:{id:"程序计数器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器","aria-hidden":"true"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),r("p",[a._v("是一块较小的内存空间，作用可以看做是当前线程所执行的字节码的行号指示器。\n程序中的分支，循环，跳转，异常处理，线程恢复等基础功能都需要依赖这个计数器来完成。\n在任何一个确定的时刻，一个处理器只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器。")]),a._v(" "),r("h2",{attrs:{id:"虚拟机栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈","aria-hidden":"true"}},[a._v("#")]),a._v(" 虚拟机栈")]),a._v(" "),r("p",[a._v("是线程私有的，生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用直到执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。")]),a._v(" "),r("h2",{attrs:{id:"本地方法栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈","aria-hidden":"true"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),r("p",[a._v("与虚拟机栈作用是非常相似的，虚拟机栈是为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机使用到的Native方法服务。")]),a._v(" "),r("h2",{attrs:{id:"java堆"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java堆","aria-hidden":"true"}},[a._v("#")]),a._v(" Java堆")]),a._v(" "),r("p",[a._v("是所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。Java堆是垃圾收集器管理的主要区域。")]),a._v(" "),r("h2",{attrs:{id:"方法区"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法区","aria-hidden":"true"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),r("p",[a._v("是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。“非堆”")]),a._v(" "),r("h2",{attrs:{id:"运行时常量池"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池","aria-hidden":"true"}},[a._v("#")]),a._v(" 运行时常量池")]),a._v(" "),r("p",[a._v("运行时常量池是方法区的一部分。Class文件中除了有类的版本，字段，方法，接口等描述信息外，还有一项目信息是常量池，用于存放编译期生成的各种上字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。")])])}],!1,null,null,null);s.options.__file="README.md";t.default=s.exports}}]);