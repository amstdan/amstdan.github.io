(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{189:function(e,n,a){"use strict";a.r(n);var i=a(0),t=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"异常链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常链","aria-hidden":"true"}},[e._v("#")]),e._v(" 异常链")]),e._v(" "),a("h3",{attrs:{id:"什么是异常链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是异常链","aria-hidden":"true"}},[e._v("#")]),e._v(" 什么是异常链")]),e._v(" "),a("p",[e._v("将捕获的异常包装进一个新异常，然后将新异常抛出。原异常被保存为新异常的一个属性(Cause)，形成了异常链。")]),e._v(" "),a("p",[e._v("在程序不同的抽象层(Dao, Service, Controller…)中, 异常链接在一起以保持从最低层的异常到最高层的异常的堆栈跟踪。")]),e._v(" "),a("p",[e._v("基本上，异常链是在程序的不同抽象层上重新抛出多个异常的过程。每个抽象层都定义了自己的异常类。当一个层中的代码抛出异常时，高层会在一个新类型的异常下重新抛出异常，该异常类型对应于该层的抽象级别。接下来，下一个更高层在其自身类型的异常下重新抛出异常。此过程继续，直到一个层处理异常，而不是重新抛出。")]),e._v(" "),a("h3",{attrs:{id:"为什么要使用异常链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用异常链","aria-hidden":"true"}},[e._v("#")]),e._v(" 为什么要使用异常链")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("在链接过程中，较高的异常总是将低级异常作为其原因(Cause)。因此，当发生异常时，程序员具有完整的异常堆栈跟踪，这对调试非常有用。")])]),e._v(" "),a("li",[a("p",[e._v("将底层异常“裸露”的向外抛是不好的设计，因为它通常与上层的抽象无关。")])]),e._v(" "),a("li",[a("p",[e._v("抛出异常的方法要符合通用接口。因此，我们需要将异常封装成另一个异常再抛出，以符合方法本身应该抛出的异常。")])])]),e._v(" "),a("h3",{attrs:{id:"怎么使用异常链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么使用异常链","aria-hidden":"true"}},[e._v("#")]),e._v(" 怎么使用异常链")]),e._v(" "),a("p",[e._v("异常的超类Throwable类提供了以下方法来进行链接异常:")]),e._v(" "),a("p",[e._v("构造器:\nThrowable(Throwable cause)\nThrowable(String message, Throwable cause)")]),e._v(" "),a("p",[e._v("方法:\npublic Throwable initCause(Throwable cause)")]),e._v(" "),a("h3",{attrs:{id:"异常链使用示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常链使用示例","aria-hidden":"true"}},[e._v("#")]),e._v(" 异常链使用示例")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('class DBException extends Exception {\n public DBException(String message) {\n  super(message);\n }\n}\nclass DaoException extends Exception {\n public DaoException(String message) {\n  super(message);\n }\n\n public DaoException(String message, Throwable cause) {\n  super(message, cause);\n }\n}\nclass ServiceException extends Exception {\n public ServiceException(String message, Throwable cause) {\n  super(message, cause);\n }\n}\n\npublic class ExceptionChain {\n\n public void findUser() throws DaoException {\n  try {\n   throw new DBException("Access database fail!");\n  } catch (DBException e) {\n   throw new DaoException("Find user fail", e);\n  }\n }\n\n public void Login() throws ServiceException {\n  try {\n   findUser();\n  } catch (DaoException e) {\n   throw new ServiceException("Login fail", e);\n  }\n }\n\n public static void main(String[] args) {\n  ExceptionChain chain = new ExceptionChain();\n  try {\n   chain.Login();\n  } catch (ServiceException e) {\n   e.printStackTrace();\n  }\n }\n}\n\n')])])]),a("p",[e._v("运行得到的异常信息是:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ServiceException: Login fail\n    at io.ExceptionChain.Login(ExceptionChain.java:37)\n    at io.ExceptionChain.main(ExceptionChain.java:44)\nCaused by: io.DaoException: Find user fail\n    at io.ExceptionChain.findUser(ExceptionChain.java:29)\n    at io.ExceptionChain.Login(ExceptionChain.java:35)\n    ... 1 more\nCaused by: io.DBException: Access database fail!\n    at io.ExceptionChain.findUser(ExceptionChain.java:27)\n    ... 2 more\n")])])])])}],!1,null,null,null);t.options.__file="java异常链.md";n.default=t.exports}}]);