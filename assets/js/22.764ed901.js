(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{172:function(a,s,t){"use strict";t.r(s);var e=t(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载器","aria-hidden":"true"}},[a._v("#")]),a._v(" 类加载器")]),a._v(" "),t("p",[a._v("虚拟机把描述类的二进制字节流加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。")]),a._v(" "),t("p",[a._v("类加载器的作用就是"),t("code",[a._v("通过一个类的全限定名来获取定义此类的二进制字节流")]),a._v("。Java已经提供了默认的类加载器，用户也可以定义自己的类加载器。")]),a._v(" "),t("h2",{attrs:{id:"类的唯一性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的唯一性","aria-hidden":"true"}},[a._v("#")]),a._v(" 类的唯一性")]),a._v(" "),t("p",[a._v("在Java虚拟机中，对于任意一个类，是用加载它的类加载器和类本身来确定其唯一性的。")]),a._v(" "),t("p",[a._v("即如果比较两个类是否“相等”，只有在两个类是由同一个类加载器的前提之下才有意义，否则，即使这两个类来源于同一个class文件，只要加载它的类加载器不同，那这两个类必定不相等。这里所指的“相等”包括代表类的Class对象的equal方法、isAssignableFrom()、isInstance()方法及instance关键字返回的结果。")]),a._v(" "),t("h2",{attrs:{id:"双亲委派模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模型","aria-hidden":"true"}},[a._v("#")]),a._v(" 双亲委派模型")]),a._v(" "),t("h3",{attrs:{id:"启动类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器","aria-hidden":"true"}},[a._v("#")]),a._v(" 启动类加载器")]),a._v(" "),t("p",[a._v("启动类加载器区别于其它的类加载器，它是虚拟机自身的一部分，无法被Java程序直接引用。其它类加载器都是由Java语言实现，并独立于虚拟机外部，并且全都继承自抽象类java.lang.ClassLoader。它负责将存放在<JAVA_HOME>\\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的类库加载到虚拟机内存中。")]),a._v(" "),t("h3",{attrs:{id:"扩展类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器","aria-hidden":"true"}},[a._v("#")]),a._v(" 扩展类加载器")]),a._v(" "),t("p",[a._v("这个加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载<JAVA_HOME>\\lib\\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。")]),a._v(" "),t("h3",{attrs:{id:"应用程序类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器","aria-hidden":"true"}},[a._v("#")]),a._v(" 应用程序类加载器")]),a._v(" "),t("p",[a._v("这个加载器由sun.misc.Launcher$AppClassLoader来实现的。由于这个类加载器是ClassLoader中的getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器。它负责加载用户类路径上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。")]),a._v(" "),t("p",[a._v("如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。")])])}],!1,null,null,null);r.options.__file="类加载器.md";s.default=r.exports}}]);