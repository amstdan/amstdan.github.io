(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{178:function(t,e,n){"use strict";n.r(e);var r=n(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"异常分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 异常分类")]),t._v(" "),n("h3",{attrs:{id:"异常类结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常类结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 异常类结构")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Throwable 是Java 语言中所有Error或Exception的超类。只有当对象是此类或其子类的实例时，才能通过 Java 虚拟机或者 Java throw 语句抛出。类似地，只有此类或其子类才可以是 catch 子句中的参数类型。")])]),t._v(" "),n("li",[n("p",[t._v("Error 是 Throwable 的子类，一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢等。对于Error, 程序应当终止。")])]),t._v(" "),n("li",[n("p",[t._v("Exception代表程序可以处理的异常。")])])]),t._v(" "),n("h3",{attrs:{id:"异常分类-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常分类-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 异常分类")]),t._v(" "),n("p",[t._v("在java中，根据在编译时是否要求异常被强制检查来将异常分成两类，"),n("strong",[t._v("Unchecked异常和Checked异常")]),t._v("。")]),t._v(" "),n("p",[t._v("编译器强制"),n("strong",[t._v("Checked异常")]),t._v("必须使用try..catch处理或用throws声明继续抛给上层调用方法处理，而对于"),n("strong",[t._v("Unchecked异常")]),t._v("，编译器则不做要求，默认情况下会自动得到处理，所以可以作处理也可以不处理。")]),t._v(" "),n("p",[t._v("Error及其衍生类和RuntimeException及其衍生类属于Unchecked异常，其它的异常均为Checked异常，需要注意Throwable本身也属于Checked异常。")]),t._v(" "),n("p",[t._v("所以，当我们需要自定义一个异常且不需要对它进行处理的时候可以选择继承RuntimeException.")]),t._v(" "),n("p",[t._v("##"),n("strong",[t._v("示例")]),t._v("\n在下例中，Error和RuntimeException是Unchecked异常，所以不进行try...catch或throws也编译正确，但Exception是Checked异常，所以如果不进行处理，就编译错误。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public void f1() {\n    throw new Error();//编译正确\n}\npublic void f2() {\n    throw new RuntimeException();//编译正确\n}\npublic void f3() {\n    throw new Exception();//编译错误\n}\npublic void f4() {\n\ttry {\n\t\tthrow new Exception();//编译正确\n\t} catch (Exception e) {\n\t\t...\n\t}\n}\npublic void f5()throws Exception {\n\tthrow new Exception();//编译正确\n}\n")])])])])}],!1,null,null,null);a.options.__file="java异常分类.md";e.default=a.exports}}]);