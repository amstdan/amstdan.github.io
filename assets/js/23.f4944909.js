(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{171:function(n,i,t){"use strict";t.r(i);var o=t(0),a=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,i=n.$createElement,t=n._self._c||i;return t("div",{staticClass:"content"},[t("h2",{attrs:{id:"springbootapplication注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication注解","aria-hidden":"true"}},[n._v("#")]),n._v(" SpringBootApplication注解")]),n._v(" "),t("p",[n._v("@SpringBootApplication注解等同于使用@Configuration，@EnableAutoConfiguration和@ComponentScan及其默认属性。")]),n._v(" "),t("ul",[t("li",[n._v("@EnableAutoConfiguration是一个类级注解，这个注解让SpringBoot根据项目添加的jar包的依赖关系来配置Spring。\n例如spring-boot-starter-web添加了Tomcat和Spring MVC，自动配置假设\n您正在开发一个Web应用程序并相应地配置Spring。")]),n._v(" "),t("li",[n._v("@ComponentScan会自动扫描指定包下的全部标有@Component的类，并注册成bean，当然包括@Component下的子注解@Service,@Repository,@Controller。")]),n._v(" "),t("li",[n._v("@Configuration 表示这个类是配置类，会把这个类中定义的@bean加载到spring容器中。")])]),n._v(" "),t("p",[n._v("通常我们会在主配置类上加上@Configuration, @EnableAutoConfiguration, @ComponentScan这些注解,\n因此使用@SpringBootApplication来简化代替。此时，你的主配置类(Appliction)要放到根包下, 这样才能扫描到所有包。")]),n._v(" "),t("h2",{attrs:{id:"main-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#main-方法","aria-hidden":"true"}},[n._v("#")]),n._v(" Main 方法")]),n._v(" "),t("p",[n._v("Main方法调用SpringApplication.Run()来启动应用，然后启动被自动配置的Tomcat.\n我们需要将SpringBootApplication.class（Main Application类的类名）作为参数，告诉SpringApplication哪个是主配置类。")])])}],!1,null,null,null);a.options.__file="README.md";i.default=a.exports}}]);