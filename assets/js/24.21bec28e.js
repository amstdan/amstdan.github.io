(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{170:function(e,t,n){"use strict";n.r(t);var r=n(0),i=Object(r.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),n("p",[e._v("JPA是一个让对象映射到关系数据库的标准技术。spring-boot-starter-data-jpa POM提供以下内容：")]),e._v(" "),e._m(2),e._v(" "),n("p",[e._v("在pom.xml中dependencies节点下加入")]),e._v(" "),e._m(3),e._v(" "),n("p",[e._v("并加入Mysql驱动依赖")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),n("p",[e._v("在application.properties中添加配置")]),e._v(" "),e._m(6),e._v(" "),n("p",[e._v("使用JPA来自动为我们初始化数据库的表, 这里使用的模式是create, 即每次加载Hibernate的时候，会删除上一次生成的表，并根据现在的Entity类来生成数据库表。")]),e._v(" "),e._m(7),e._v(" "),n("p",[e._v("在Mysql数据库中创建一个数据库base。")]),e._v(" "),e._m(8),e._v(" "),n("p",[e._v("在src/main/resources下新建一个文件data.sql.")]),e._v(" "),e._m(9),e._v(" "),n("p",[e._v("这个sql脚本会在项目启动的时候自动运行。")]),e._v(" "),e._m(10),e._v(" "),n("p",[e._v("传统JPA Entity被声明在persistence.xml文件。在Spring Boot中, 使用@EntityScan来声明Entity的扫描位置，不需要定义在xml文件中。默认情况下，主配置类（被@SpringBootApplication注解）所在包的子包中被@Entity注解的类都会被扫描。\n当然，你也可以使用@EntityScan来自定义Entity扫描位置。")]),e._v(" "),n("p",[e._v("创建package ...entity, 创建类Admin。")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),n("p",[e._v("创建package ...repository, 类AdminRepository，继承CrudRepository。")]),e._v(" "),e._m(13),e._v(" "),n("p",[e._v("CrudRepository已经自带了一些常用方法。")]),e._v(" "),e._m(14),e._v(" "),n("p",[e._v("你也可以自定义一些方法。查询会根据方法名自动生成，不需要写相关数据访问的实现。")]),e._v(" "),n("p",[e._v("关于Repository更多的内容，请查阅"),n("a",{attrs:{href:"https://docs.spring.io/spring-data/jpa/docs/2.0.2.RELEASE/reference/html/#repositories",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Data Repositories"),n("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(15),e._v(" "),n("p",[e._v("创建package ...service 类AdminService")]),e._v(" "),e._m(16),e._v(" "),n("p",[e._v("创建package ...serviceImpl 类adminServiceImpl, 并注入AdminRepository")]),e._v(" "),e._m(17),e._v(" "),n("p",[e._v("创建admin controller")]),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),n("p",[e._v("访问 localhost:8080/admins， 将显示所有的admin信息。")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"使用jpa持久化对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用jpa持久化对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用JPA持久化对象")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"引入jpa-starter依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引入jpa-starter依赖","aria-hidden":"true"}},[this._v("#")]),this._v(" 引入JPA starter依赖")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("hibernate - 最流行的JPA实现之一。")]),this._v(" "),t("li",[this._v("Spring Data JPA - 使实现基于JPA repositories变得容易。")]),this._v(" "),t("li",[this._v("Spring ORMs - Spring框架对ORM的核心支持。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("\t<dependency>  \n\t\t<groupId>org.springframework.boot</groupId>  \n\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t</dependency>\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("\t<dependency>\n\t\t<groupId>mysql</groupId>\n\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t<scope>runtime</scope>\n\t</dependency>\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"配置数据源和jpa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置数据源和jpa","aria-hidden":"true"}},[this._v("#")]),this._v(" 配置数据源和JPA")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("#datasource\nspring.datasource.url=jdbc:mysql://localhost:3306/base?useUnicode=yes&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&connectionCollation=utf8_general_ci\nspring.datasource.username=root\nspring.datasource.password=\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n#JPA\nspring.jpa.show-sql=true     \nspring.jpa.generate-ddl=true\nspring.jpa.hibernate.ddl-auto=create\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("在正式产品中，不要使用JPA自动生成数据表的功能")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("create database base;\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("INSERT INTO admin(id, username, password, first_name, last_name, email) values (null, 'butcher', '123', 'Aidan', 'Zhang', '111@qq.com');\nINSERT INTO admin(id, username, password, first_name, last_name, email) values (null, 'aaa', '123', 'Emma', 'Wang', '222@qq.com');\nINSERT INTO admin(id, username, password, first_name, last_name, email) values (null, 'bbb', '123', 'Ida', 'Li', '333@qq.com');\nINSERT INTO admin(id, username, password, first_name, last_name, email) values (null, 'ccc', '123', 'William', 'Wu', '444@qq.com');\nINSERT INTO admin(id, username, password, first_name, last_name, email) values (null, 'zzz', '123', 'Oscar', 'Zhao', '555@qq.com');\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"创建entity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建entity","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建Entity")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("package com.example.demo.entity;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\n\n@Entity\npublic class Admin {\n\n\t@Id\n\t@GeneratedValue\n\tprivate Long id;\n\n\t@Column(nullable = false)\n\tprivate String username;\n\n\tprivate String password;\n\n\tprivate String firstName;\n\n\tprivate String lastName;\n\n\tprivate String email;\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"创建repository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建repository","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建Repository")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("public interface AdminRepository extends CrudRepository<Admin, Long> {\n\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("public interface CrudRepository<T, ID extends Serializable>\nextends Repository<T, ID> {\n\n\t<S extends T> S save(S entity);      \n\n\tOptional<T> findById(ID primaryKey); \n\n\tIterable<T> findAll();               \n\n\tlong count();                        \n\n\tvoid delete(T entity);               \n\n\tboolean existsById(ID primaryKey);   \n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"搭建service和controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建service和controller","aria-hidden":"true"}},[this._v("#")]),this._v(" 搭建Service和Controller")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("public interface AdminService {\n\n\tList<Admin> findAllAdmins();\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("@Service\npublic class AdminServiceImpl implements AdminService {\n\n\tpublic @Autowired AdminRepository adminRepository;\n\n\t@Override\n\tpublic List<Admin> findAllAdmins() {\n\t\treturn (List<Admin>) adminRepository.findAll();\n\t}\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('@RestController\npublic class AdminController {\n\tpublic @Autowired AdminService adminService;\n\t\n\t@RequestMapping("/admins")\n\tpublic List<Admin> getAllAdmins() {\n\t\treturn adminService.findAllAdmins();\n\t}\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"运行项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行项目","aria-hidden":"true"}},[this._v("#")]),this._v(" 运行项目")])}],!1,null,null,null);i.options.__file="jpa.md";t.default=i.exports}}]);